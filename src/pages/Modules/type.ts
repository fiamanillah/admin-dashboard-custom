import type { TCourse } from '../Course/type';
import type { TLesson } from '../Lessons/type';
import { z } from 'zod';

export type TModule = {
    id: string; // UUID as a string
    courseId: string; // UUID as a string
    course: TCourse; // Assuming `Course` is the type for Course model
    title: string;
    description?: string | null; // `description` is optional and can be null
    isPublished: boolean;
    isPreview: boolean;
    releaseDate?: Date | null; // `releaseDate` is optional and can be null
    estimatedDurationMinutes?: number | null; // `estimatedDurationMinutes` is optional and can be null
    createdAt: Date;
    updatedAt: Date;

    lessons: TLesson[]; // Assuming `Lesson` is the type for Lesson model
    // moduleProgresses: ModuleProgress[]; // Assuming `ModuleProgress` is the type for ModuleProgress model
};

export const ModuleSchema = z.object({
    courseId: z.string().uuid().optional(), // courseId is required
    title: z.string().min(1), // title is required
    description: z.string().optional(), // optional description
    isPublished: z.boolean(), // isPublished is required
    isPreview: z.boolean().optional(), // isPreview is Optional
    requiredPlanLevel: z.number().int().min(1).max(10).optional(), // Assuming a range from 1 to 10 for plan levels
    releaseDate: z.date().optional().nullable(), // releaseDate is optional and can be null
    estimatedDurationMinutes: z.number().optional().nullable(), // estimatedDurationMinutes is optional and can be null
    createdAt: z.date().optional(), // Optional createdAt, generated by the backend
    updatedAt: z.date().optional(), // Optional updatedAt, generated by the backend
    lessons: z.array(z.any()).optional(), // lessons is an array of lessons, optional
});
